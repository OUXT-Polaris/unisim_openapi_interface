/**
 * unisim_ros2_control_api
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator 2.4.23.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */



#include "Pose.h"

namespace io {
namespace swagger {
namespace client {
namespace model {

Pose::Pose()
{
    m_PositionIsSet = false;
    m_OrientationIsSet = false;
}

Pose::~Pose()
{
}

void Pose::validate()
{
    // TODO: implement validation
}

web::json::value Pose::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_PositionIsSet)
    {
        val[utility::conversions::to_string_t("position")] = ModelBase::toJson(m_Position);
    }
    if(m_OrientationIsSet)
    {
        val[utility::conversions::to_string_t("orientation")] = ModelBase::toJson(m_Orientation);
    }

    return val;
}

void Pose::fromJson(web::json::value& val)
{
    if(val.has_field(utility::conversions::to_string_t("position")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("position")];
        if(!fieldValue.is_null())
        {
            std::shared_ptr<Point> newItem(new Point());
            newItem->fromJson(fieldValue);
            setPosition( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("orientation")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("orientation")];
        if(!fieldValue.is_null())
        {
            std::shared_ptr<Quaternion> newItem(new Quaternion());
            newItem->fromJson(fieldValue);
            setOrientation( newItem );
        }
    }
}

void Pose::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(m_PositionIsSet)
    {
        if (m_Position.get())
        {
            m_Position->toMultipart(multipart, utility::conversions::to_string_t("position."));
        }
        
    }
    if(m_OrientationIsSet)
    {
        if (m_Orientation.get())
        {
            m_Orientation->toMultipart(multipart, utility::conversions::to_string_t("orientation."));
        }
        
    }
}

void Pose::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("position")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("position")))
        {
            std::shared_ptr<Point> newItem(new Point());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("position."));
            setPosition( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("orientation")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("orientation")))
        {
            std::shared_ptr<Quaternion> newItem(new Quaternion());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("orientation."));
            setOrientation( newItem );
        }
    }
}

std::shared_ptr<Point> Pose::getPosition() const
{
    return m_Position;
}


void Pose::setPosition(std::shared_ptr<Point> value)
{
    m_Position = value;
    m_PositionIsSet = true;
}
bool Pose::positionIsSet() const
{
    return m_PositionIsSet;
}

void Pose::unsetPosition()
{
    m_PositionIsSet = false;
}

std::shared_ptr<Quaternion> Pose::getOrientation() const
{
    return m_Orientation;
}


void Pose::setOrientation(std::shared_ptr<Quaternion> value)
{
    m_Orientation = value;
    m_OrientationIsSet = true;
}
bool Pose::orientationIsSet() const
{
    return m_OrientationIsSet;
}

void Pose::unsetOrientation()
{
    m_OrientationIsSet = false;
}

}
}
}
}

