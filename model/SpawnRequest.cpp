/**
 * unisim_ros2_control_api
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator 2.4.23.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */



#include "SpawnRequest.h"

namespace io {
namespace swagger {
namespace client {
namespace model {

SpawnRequest::SpawnRequest()
{
    m_Urdf_path = utility::conversions::to_string_t("");
    m_Urdf_pathIsSet = false;
    m_PoseIsSet = false;
}

SpawnRequest::~SpawnRequest()
{
}

void SpawnRequest::validate()
{
    // TODO: implement validation
}

web::json::value SpawnRequest::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_Urdf_pathIsSet)
    {
        val[utility::conversions::to_string_t("urdf_path")] = ModelBase::toJson(m_Urdf_path);
    }
    if(m_PoseIsSet)
    {
        val[utility::conversions::to_string_t("pose")] = ModelBase::toJson(m_Pose);
    }

    return val;
}

void SpawnRequest::fromJson(web::json::value& val)
{
    if(val.has_field(utility::conversions::to_string_t("urdf_path")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("urdf_path")];
        if(!fieldValue.is_null())
        {
            setUrdfPath(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("pose")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("pose")];
        if(!fieldValue.is_null())
        {
            std::shared_ptr<Pose> newItem(new Pose());
            newItem->fromJson(fieldValue);
            setPose( newItem );
        }
    }
}

void SpawnRequest::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(m_Urdf_pathIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("urdf_path"), m_Urdf_path));
        
    }
    if(m_PoseIsSet)
    {
        if (m_Pose.get())
        {
            m_Pose->toMultipart(multipart, utility::conversions::to_string_t("pose."));
        }
        
    }
}

void SpawnRequest::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("urdf_path")))
    {
        setUrdfPath(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("urdf_path"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("pose")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("pose")))
        {
            std::shared_ptr<Pose> newItem(new Pose());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("pose."));
            setPose( newItem );
        }
    }
}

utility::string_t SpawnRequest::getUrdfPath() const
{
    return m_Urdf_path;
}


void SpawnRequest::setUrdfPath(utility::string_t value)
{
    m_Urdf_path = value;
    m_Urdf_pathIsSet = true;
}
bool SpawnRequest::urdfPathIsSet() const
{
    return m_Urdf_pathIsSet;
}

void SpawnRequest::unsetUrdf_path()
{
    m_Urdf_pathIsSet = false;
}

std::shared_ptr<Pose> SpawnRequest::getPose() const
{
    return m_Pose;
}


void SpawnRequest::setPose(std::shared_ptr<Pose> value)
{
    m_Pose = value;
    m_PoseIsSet = true;
}
bool SpawnRequest::poseIsSet() const
{
    return m_PoseIsSet;
}

void SpawnRequest::unsetPose()
{
    m_PoseIsSet = false;
}

}
}
}
}

