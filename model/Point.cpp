/**
 * unisim_ros2_control_api
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator 2.4.23.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */



#include "Point.h"

namespace io {
namespace swagger {
namespace client {
namespace model {

Point::Point()
{
    m_x = 0.0;
    m_xIsSet = false;
    m_y = 0.0;
    m_yIsSet = false;
    m_z = 0.0;
    m_zIsSet = false;
}

Point::~Point()
{
}

void Point::validate()
{
    // TODO: implement validation
}

web::json::value Point::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_xIsSet)
    {
        val[utility::conversions::to_string_t("x")] = ModelBase::toJson(m_x);
    }
    if(m_yIsSet)
    {
        val[utility::conversions::to_string_t("y")] = ModelBase::toJson(m_y);
    }
    if(m_zIsSet)
    {
        val[utility::conversions::to_string_t("z")] = ModelBase::toJson(m_z);
    }

    return val;
}

void Point::fromJson(web::json::value& val)
{
    if(val.has_field(utility::conversions::to_string_t("x")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("x")];
        if(!fieldValue.is_null())
        {
            setX(ModelBase::doubleFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("y")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("y")];
        if(!fieldValue.is_null())
        {
            setY(ModelBase::doubleFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("z")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("z")];
        if(!fieldValue.is_null())
        {
            setZ(ModelBase::doubleFromJson(fieldValue));
        }
    }
}

void Point::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(m_xIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("x"), m_x));
    }
    if(m_yIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("y"), m_y));
    }
    if(m_zIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("z"), m_z));
    }
}

void Point::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("x")))
    {
        setX(ModelBase::doubleFromHttpContent(multipart->getContent(utility::conversions::to_string_t("x"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("y")))
    {
        setY(ModelBase::doubleFromHttpContent(multipart->getContent(utility::conversions::to_string_t("y"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("z")))
    {
        setZ(ModelBase::doubleFromHttpContent(multipart->getContent(utility::conversions::to_string_t("z"))));
    }
}

double Point::getX() const
{
    return m_x;
}


void Point::setX(double value)
{
    m_x = value;
    m_xIsSet = true;
}
bool Point::XIsSet() const
{
    return m_xIsSet;
}

void Point::unsetx()
{
    m_xIsSet = false;
}

double Point::getY() const
{
    return m_y;
}


void Point::setY(double value)
{
    m_y = value;
    m_yIsSet = true;
}
bool Point::YIsSet() const
{
    return m_yIsSet;
}

void Point::unsety()
{
    m_yIsSet = false;
}

double Point::getZ() const
{
    return m_z;
}


void Point::setZ(double value)
{
    m_z = value;
    m_zIsSet = true;
}
bool Point::ZIsSet() const
{
    return m_zIsSet;
}

void Point::unsetz()
{
    m_zIsSet = false;
}

}
}
}
}

